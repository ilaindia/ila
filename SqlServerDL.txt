
Imports System.Data.SqlClient

Namespace SqlDbDL

    '''<summary>Data Access Layer Class</summary>
    Public Class SqlServerDL
        Private _connectionstring As String
        Private DbConn As SqlConnection
        Private DBStatus As Boolean
        Public CmdTimeOut As Integer

        Public WriteOnly Property ConnectionString() As String
            Set(ByVal value As String)
                _connectionstring = value
            End Set
        End Property

        ''' <summary>Create a connection string</summary>
        Public Sub New(ByVal connstr As String)
            _connectionstring = connstr
            CmdTimeOut = -1
            DBStatus = False
        End Sub

        Public Sub New()
            DBStatus = False
            CmdTimeOut = -1
        End Sub

        ''' <summary>Create and opens a new connection </summary>
        Public Sub Open()
            Try
                DbConn = New SqlConnection
                DbConn.ConnectionString = _ConnectionString
                DbConn.Open()
                DBStatus = True
            Catch ex As Exception
                Throw ex
            End Try
        End Sub

        ''' <summary>Verify whether the connection is open</summary>
        ''' <returns>Connection status</returns>
        Public Function IsOpen()
            Return DBStatus
        End Function

        ''' <summary>Close and Dispose the connection</summary>
        Public Sub Close()
            If IsOpen() Then
                DbConn.Close()
                DbConn.Dispose()
                DBStatus = False
            End If
        End Sub

        ''' <summary>
        ''' Insert the records into the table 
        ''' </summary>
        ''' <param name="SqlQuery">SqlQuery</param>
        ''' <param name="SqlParam">SqlParameter</param>
        ''' <returns>last indentity value</returns>
        ''' <remarks></remarks>
        Public Function Insert(ByVal SqlQuery As String, ByVal ParamArray SqlParam() As SqlParameter) As Integer
            Dim newProdID As Int64 = 0
            Dim cmd As SqlCommand

            SqlQuery += ";SELECT CAST(SCOPE_IDENTITY() AS int);"
            cmd = New SqlCommand(SqlQuery, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            newProdID = Convert.ToInt64(cmd.ExecuteScalar())

            Return newProdID
        End Function

        ''' <summary>
        '''  Insertion, Updation and Deletion from table
        ''' </summary>
        ''' <param name="SqlQuery">SqlQuery</param>
        ''' <returns>Number of rows affected</returns>
        ''' <remarks></remarks>
        Public Function Execute(ByVal SqlQuery As String) As Integer
            Dim newProdID As Int64 = 0
            Dim cmd As New SqlCommand(SqlQuery, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If

            newProdID = Convert.ToInt64(cmd.ExecuteNonQuery())

            Return newProdID
        End Function

        ''' <summary>
        '''  Insertion, Updation and Deletion from table
        ''' </summary>
        ''' <param name="SqlQuery">SqlQuery</param>
        ''' <param name="SqlParam">SqlParameter Name</param>
        ''' <returns>Number of rows affected</returns>
        ''' <remarks></remarks>
        Public Function Execute(ByVal SqlQuery As String, ByVal ParamArray SqlParam() As SqlParameter) As Int64
            Dim cmd As New SqlCommand(SqlQuery, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Return Convert.ToInt64(cmd.ExecuteNonQuery())
        End Function

        ''' <summary>
        '''  Stored Procedure 
        ''' </summary>
        ''' <param name="SpName">Stored Procedure Name</param>
        ''' <param name="SqlParam">SqlParameter Name</param>
        ''' <returns>Value from the Stored Procedure</returns>
        ''' <remarks></remarks>
        Public Function SP_Execute(ByVal SpName As String, ByVal ParamArray SqlParam() As SqlParameter) As Object
            Dim cmd As New SqlCommand(SpName, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If
            cmd.CommandType = CommandType.StoredProcedure

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Return cmd.ExecuteScalar()
        End Function

        ''' <summary>
        ''' Select a single column value
        ''' </summary>
        ''' <param name="SqlQuery">SqlQuery</param>
        ''' <param name="SqlParam">SqlParameter Name</param>
        ''' <returns>Single column value from the query as Object</returns>
        ''' <remarks></remarks>
        Public Function SelectColumn(ByVal SqlQuery As String, ByVal ParamArray SqlParam() As SqlParameter) As Object
            Dim cmd As New SqlCommand(SqlQuery, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If
            cmd.CommandType = CommandType.Text

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Return cmd.ExecuteScalar()
        End Function

        ''' <summary>
        ''' Select a single column value
        ''' </summary>
        ''' <param name="tablename">Tablename</param>
        ''' <param name="columnname">Columnname</param>
        ''' <param name="condition">Condition</param>
        ''' <returns>Single column value from the query as Object</returns>
        ''' <remarks></remarks>
        Public Function SelectColumn(ByVal tablename As String, ByVal columnname As String, ByVal condition As String) As Object

            If condition <> "" Then
                condition = "where " + condition
            End If

            Dim query As String
            query = "select " & columnname & " from " & tablename & " " & condition
            Dim cmd As New SqlCommand(query, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If
            Dim adapter As New SqlDataAdapter(cmd)
            Dim dbtable As New DataSet

            adapter.Fill(dbtable, tablename)

            If dbtable.Tables(tablename).Rows.Count > 0 Then
                Return dbtable.Tables(tablename).Rows(0)(0)
            Else
                Return "no_record_found"
            End If
        End Function

        ''' <summary>
        ''' A data table for the given TSQL Query with-out Sql Parameters
        ''' </summary>
        ''' <param name="SqlQuery">SqlQuery</param>
        ''' <returns>DataTable</returns>
        ''' <remarks></remarks>
        Public Function Select_Table(ByVal SqlQuery As String) As DataTable

            Dim cmd As New SqlCommand(SqlQuery, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If

            Dim adapter As New SqlDataAdapter(cmd)

            Dim dbtable As New DataSet
            adapter.Fill(dbtable, "recordset")

            Return dbtable.Tables("recordset")

        End Function

        ''' <summary>
        ''' A data table for the given TSQL Query with Sql Parameters
        ''' </summary>
        ''' <param name="SqlQuery">SqlQuery</param>
        ''' <param name="SqlParam">SqlParameter Name</param>
        ''' <returns>DataTable</returns>
        ''' <remarks></remarks>
        Public Function Select_Table(ByVal SqlQuery As String, ByVal ParamArray SqlParam() As SqlParameter) As DataTable

            Dim cmd As New SqlCommand(SqlQuery, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If
            Dim adapter As New SqlDataAdapter(cmd)

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Dim dbtable As New DataSet
            adapter.Fill(dbtable, "recordset")

            Return dbtable.Tables("recordset")

        End Function

        ''' <summary>
        ''' A data data set for the given TSQL Query with Sql Parameters
        ''' </summary>
        ''' <param name="SqlQuery">SqlQuery</param>
        ''' <param name="SqlParam">SqlParameter Name</param>
        ''' <returns>DataTable</returns>
        ''' <remarks></remarks>
        Public Function Select_DataSet(ByVal SqlQuery As String, ByVal ParamArray SqlParam() As SqlParameter) As DataSet

            Dim cmd As New SqlCommand(SqlQuery, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If
            Dim adapter As New SqlDataAdapter(cmd)

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Dim dbtable As New DataSet
            adapter.Fill(dbtable, "recordset")

            Return dbtable
        End Function

        ''' <summary>
        ''' A data data set for the given TSQL Query with Sql Parameters
        ''' </summary>
        ''' <param name="SqlQuery">SqlQuery</param>
        ''' <returns>DataTable</returns>
        ''' <remarks></remarks>
        Public Function Select_DataSet(ByVal SqlQuery As String) As DataSet

            Dim cmd As New SqlCommand(SqlQuery, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If
            Dim adapter As New SqlDataAdapter(cmd)

            Dim dbtable As New DataSet
            adapter.Fill(dbtable, "recordset")

            Return dbtable
        End Function

        Public Function Select_Row(ByVal SqlQuery As String, ByRef RowData As DataRow, ByVal ParamArray SqlParam() As SqlParameter) As Integer

            Dim cmd As New SqlCommand(SqlQuery, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If
            Dim adapter As New SqlDataAdapter(cmd)

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Dim dbtable As New DataSet
            adapter.Fill(dbtable, "recordset")

            If dbtable.Tables("recordset").Rows.Count > 0 Then
                RowData = dbtable.Tables("recordset").Rows(0)

                Return dbtable.Tables("recordset").Rows.Count
            Else
                RowData = Nothing
                Return 0
            End If
        End Function

        Public Function Select_Row(ByVal SqlQuery As String, ByVal ParamArray SqlParam() As SqlParameter) As DataRow
            Dim cmd As New SqlCommand(SqlQuery, DbConn)
            Dim RowData As DataRow

            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If
            Dim adapter As New SqlDataAdapter(cmd)

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Dim dbtable As New DataSet
            adapter.Fill(dbtable, "recordset")

            If dbtable.Tables("recordset").Rows.Count > 0 Then
                RowData = dbtable.Tables("recordset").Rows(0)
            Else
                RowData = Nothing
            End If

            Return RowData
        End Function

        Public Function Select_TableReader(ByVal SqlQuery As String, ByVal ParamArray SqlParam() As SqlParameter) As SqlDataReader

            Dim cmd As New SqlCommand(SqlQuery, DbConn)
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If
            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Return cmd.ExecuteReader
        End Function

        ''' <summary>
        ''' A data table for the given StoredProcedure with Sql Parameters
        ''' </summary>
        ''' <param name="SpName">StoredProcedure Name</param>
        ''' <param name="SqlParam">SqlParameter Name</param>
        ''' <returns>Datatable</returns>
        ''' <remarks></remarks>
        Public Function SP_Execute_Table(ByVal SpName As String, ByVal ParamArray SqlParam() As SqlParameter) As DataTable
            Dim cmd As New SqlCommand
            cmd.CommandText = SpName
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = DbConn
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Dim adapter As New SqlDataAdapter(cmd)

            Dim dbtable As New DataSet
            adapter.Fill(dbtable, "recordset")

            Return dbtable.Tables("recordset")
        End Function

        ''' <summary>
        ''' A data table for the given StoredProcedure with Sql Parameters
        ''' </summary>
        ''' <param name="SpName">StoredProcedure Name</param>
        ''' <param name="SqlParam">SqlParameter Name</param>
        ''' <returns>Datatable</returns>
        ''' <remarks></remarks>
        Public Function SP_Select_Table(ByVal SpName As String, ByVal ParamArray SqlParam() As SqlParameter) As DataTable
            Dim cmd As New SqlCommand
            cmd.CommandText = SpName
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = DbConn
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Dim adapter As New SqlDataAdapter(cmd)
            Dim dbtable As New DataSet
            adapter.Fill(dbtable, "recordset")

            Return dbtable.Tables("recordset")
        End Function

        ''' <summary>
        ''' A data table for the given StoredProcedure with Sql Parameters
        ''' </summary>
        ''' <param name="SpName">StoredProcedure Name</param>
        ''' <param name="SqlParam">SqlParameter Name</param>
        ''' <returns>Datatable</returns>
        ''' <remarks></remarks>
        Public Function SP_Select_DataSet(ByVal SpName As String, ByVal ParamArray SqlParam() As SqlParameter) As DataSet
            Dim cmd As New SqlCommand
            cmd.CommandText = SpName
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = DbConn
            If CmdTimeOut >= 0 Then
                cmd.CommandTimeout = CmdTimeOut
            End If

            For Each param As SqlParameter In SqlParam
                cmd.Parameters.Add(param)
            Next

            Dim adapter As New SqlDataAdapter(cmd)

            Dim dbtable As New DataSet
            adapter.Fill(dbtable, "recordset")

            Return dbtable
        End Function
    End Class
End Namespace